// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String
  email      String     @unique
  password   String
  roleId     Int
  contact    String?
  alamat     String     @default("")
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  image      String?
  role       Role       @relation(fields: [roleId], references: [id])
  Review     Review[]
  Comment    Comment[]
  Property   Property[]

  Transaction Transaction[]
}

model Role {
  id   Int    @id @default(autoincrement())
  role String
  User User[]
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  UNDER_RENOVATION
}

enum RoomType {
  LUXURY
  DELUXE
  SUPERIOR
  EXECUTIVE
  CLUB
  STANDARD
}

model Room {
  id          Int      @id @default(autoincrement())
  propertyId  Int
  type        RoomType
  price       Int
  description String

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  property  Property      @relation(fields: [propertyId], references: [id])
  images    RoomPicture[]
  status    RoomStatus

  transaction Transaction[]
}

model RoomPicture {
  id        Int      @id @default(autoincrement())
  roomId    Int
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
}

enum PropertyType {
  APARTMENT
  VILLA
  TOWNHOUSE
  OTHER
  CONDO
  COTTAGE
}

model Property {

  id         Int    @id @default(autoincrement())
  name       String
  descripion String

  tenantId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Room Room[]

  image String?

  user             User               @relation(fields: [tenantId], references: [id])
  Peak_Season_Rate Peak_Season_Rate[]
  Review           Review[]
  type             PropertyType
  property_pics    Property_pic[]
  Transaction      Transaction?       @relation(fields: [transactionId], references: [id])
  transactionId    Int?
}

model Property_pic {
 
=======
  id                 Int              @id @default(autoincrement())
  name               String
  description        String
  location           String
  ownerId            Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  Room               Room[]
  user               User             @relation(fields: [ownerId], references: [id])
  availableStartDate String
  availableEndDate   String
  maxGuest           Int
  PeakSeasonRate     PeakSeasonRate[]
  Review             Review[]
  type               PropertyType
  images             ProperyPicture[]
}

model ProperyPicture {
  id         Int       @id @default(autoincrement())
  image      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Property   Property? @relation(fields: [propertyId], references: [id])
  propertyId Int?
}

model PeakSeasonRate {
  id                          Int      @id @default(autoincrement())
  propertyId                  Int
  startDate                   DateTime
  endDate                     DateTime
  price_adjustment_percentage Int
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  property                    Property @relation(fields: [propertyId], references: [id])
}

model Transaction {
  id                Int               @id @default(autoincrement())
  uuid              String            @unique @default(uuid())
  orderId           String            @unique
  roomId            Int
  userId            Int
  paymentMethod     PaymentMethod
  choosePayment     ChosePayment
  checkIn           DateTime
  checkOut          DateTime
  total             Int
  statusTransaction StatusTransaction
  paymentProof      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  room              Room              @relation(fields: [roomId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  property          Property[]
}

enum ChosePayment {
  CREDIT
  CASH
}

enum PaymentMethod {
  MANDIRI
  BCA
  BNI
  PayPal
}

enum StatusTransaction {
  CONFIRM
  REJECT
  PENDING
  EXPIRED
  CANCEL

  PROCESS

}

model Review {
  id     Int    @id @default(autoincrement())
  userId Int
  rating String
  riview String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  TenantReply Comment[]
  Property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  riviewId  Int
  tenantId  Int
  reply     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review   @relation(fields: [riviewId], references: [id])
  user      User     @relation(fields: [tenantId], references: [id])
}
